//Package Stock comment
// This file war generated by tars2go 1.1
// Generated from stock.tars
package Stock

import (
	"fmt"
	"github.com/TarsCloud/TarsGo/tars/protocol/codec"
)

//KLine strcut implement
type KLine struct {
	Day        string  `json:"day"`
	Open       float64 `json:"open"`
	High       float64 `json:"high"`
	Low        float64 `json:"low"`
	Close      float64 `json:"close"`
	Volume     int64   `json:"volume"`
	MA5Price   float64 `json:"MA5Price"`
	MA5Volume  int64   `json:"MA5Volume"`
	MA10Price  float64 `json:"MA10Price"`
	MA10Volume int64   `json:"MA10Volume"`
	MA20Price  float64 `json:"MA20Price"`
	MA20Volume int64   `json:"MA20Volume"`
	MA30Price  float64 `json:"MA30Price"`
	MA30Volume int64   `json:"MA30Volume"`
}

func (st *KLine) resetDefault() {
}

//ReadFrom reads  from _is and put into struct.
func (st *KLine) ReadFrom(_is *codec.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.resetDefault()

	err = _is.Read_string(&st.Day, 0, true)
	if err != nil {
		return err
	}

	err = _is.Read_float64(&st.Open, 1, true)
	if err != nil {
		return err
	}

	err = _is.Read_float64(&st.High, 2, true)
	if err != nil {
		return err
	}

	err = _is.Read_float64(&st.Low, 3, true)
	if err != nil {
		return err
	}

	err = _is.Read_float64(&st.Close, 4, true)
	if err != nil {
		return err
	}

	err = _is.Read_int64(&st.Volume, 5, true)
	if err != nil {
		return err
	}

	err = _is.Read_float64(&st.MA5Price, 6, false)
	if err != nil {
		return err
	}

	err = _is.Read_int64(&st.MA5Volume, 7, false)
	if err != nil {
		return err
	}

	err = _is.Read_float64(&st.MA10Price, 8, false)
	if err != nil {
		return err
	}

	err = _is.Read_int64(&st.MA10Volume, 9, false)
	if err != nil {
		return err
	}

	err = _is.Read_float64(&st.MA20Price, 10, false)
	if err != nil {
		return err
	}

	err = _is.Read_int64(&st.MA20Volume, 11, false)
	if err != nil {
		return err
	}

	err = _is.Read_float64(&st.MA30Price, 12, false)
	if err != nil {
		return err
	}

	err = _is.Read_int64(&st.MA30Volume, 13, false)
	if err != nil {
		return err
	}

	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *KLine) ReadBlock(_is *codec.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.resetDefault()

	err, have = _is.SkipTo(codec.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require KLine, but not exist. tag %d", tag)
		}
		return nil

	}

	st.ReadFrom(_is)

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *KLine) WriteTo(_os *codec.Buffer) error {
	var err error

	err = _os.Write_string(st.Day, 0)
	if err != nil {
		return err
	}

	err = _os.Write_float64(st.Open, 1)
	if err != nil {
		return err
	}

	err = _os.Write_float64(st.High, 2)
	if err != nil {
		return err
	}

	err = _os.Write_float64(st.Low, 3)
	if err != nil {
		return err
	}

	err = _os.Write_float64(st.Close, 4)
	if err != nil {
		return err
	}

	err = _os.Write_int64(st.Volume, 5)
	if err != nil {
		return err
	}

	err = _os.Write_float64(st.MA5Price, 6)
	if err != nil {
		return err
	}

	err = _os.Write_int64(st.MA5Volume, 7)
	if err != nil {
		return err
	}

	err = _os.Write_float64(st.MA10Price, 8)
	if err != nil {
		return err
	}

	err = _os.Write_int64(st.MA10Volume, 9)
	if err != nil {
		return err
	}

	err = _os.Write_float64(st.MA20Price, 10)
	if err != nil {
		return err
	}

	err = _os.Write_int64(st.MA20Volume, 11)
	if err != nil {
		return err
	}

	err = _os.Write_float64(st.MA30Price, 12)
	if err != nil {
		return err
	}

	err = _os.Write_int64(st.MA30Volume, 13)
	if err != nil {
		return err
	}

	return nil
}

//WriteBlock encode struct
func (st *KLine) WriteBlock(_os *codec.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(codec.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	st.WriteTo(_os)

	err = _os.WriteHead(codec.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}
